<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
// Produced by the UNIMOODLE University Group: Universities of
// Valladolid, Complutense de Madrid, UPV/EHU, León, Salamanca,
// Illes Balears, Valencia, Rey Juan Carlos, La Laguna, Zaragoza, Málaga,
// Córdoba, Extremadura, Vigo, Las Palmas de Gran Canaria y Burgos.
/**
 * @package   certifygenvalidation_cmd
 * @copyright  2024 Proyecto UNIMOODLE
 * @author     UNIMOODLE Group (Coordinator) <direccion.area.estrategia.digital@uva.es>
 * @author     3IPUNT <contacte@tresipunt.com>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace certifygenvalidation_cmd;

use coding_exception;
use context_course;
use core\invalid_persistent_exception;
use core\session\exception;
use dml_exception;
use file_exception;
use mod_certifygen\certifygen_file;
use mod_certifygen\interfaces\ICertificateValidation;
use mod_certifygen\persistents\certifygen_validations;
use moodle_exception;
use moodle_url;
use pdf;
use stdClass;
use stored_file;
use stored_file_creation_exception;

global $CFG;
require_once($CFG->dirroot. '/user/lib.php');
class certifygenvalidation_cmd implements ICertificateValidation
{

    /**
     * @param certifygen_file $file
     * @return array
     * @throws coding_exception
     * @throws dml_exception
     */
    public function sendFile(certifygen_file $file): array
    {
        $path = get_config('certifygenvalidation_cmd', 'path');
        if (empty($path)) {
            throw new exception('cmdnotconfigured', 'certifygenvalidation_cmd');
        }

        // Recupera los parámetros
        $filename = escapeshellarg($file->get_file()->get_filename());
        $userid = escapeshellarg($file->get_user()->id);
        $data = [
            'user_id' => $userid,
            'user_fullname' => fullname($file->get_user()),
            'course_fullname' => $file->get_course()->fullname,
            'course_shortname' => $file->get_course()->shortname,
        ];
        $datajson = json_encode($data);
        // Construye el comando
        $command = "$path $filename '$datajson'";

        // Ejecuta el comando y captura la salida
        $output = [];
        $return_var = 0;
        exec($command, $output, $return_var);

        $haserror = false;
        // Muestra la salida del comando
        if ($return_var !== 0) {
            $haserror = true;
            error_log(__FUNCTION__ . " Error ejecutando el comando. Código de salida: ".var_export($return_var, true));
        } else {
            if (!empty($output)) {
                try {
                    $this->save_file_on_moodledata($file, $output[0]);
                    $status = certifygen_validations::STATUS_FINISHED_OK;
                } catch (moodle_exception $e) {
                    error_log(__FUNCTION__ . '-CMD e: '.var_export($e->getMessage(), true));
                    $status = certifygen_validations::STATUS_FINISHED_ERROR;
                }
                // Save new status:
                $validation = new certifygen_validations($file->get_validationid());
                $validation->set('status', $status);
                $validation->save();
            }
        }
        return [
            'haserror' => $haserror
        ];
    }

    /**
     * @param certifygen_file $file
     * @param $content
     * @return void
     * @throws dml_exception
     * @throws file_exception
     * @throws stored_file_creation_exception
     */
    private function save_file_on_moodledata(certifygen_file $file, $content) :void {
        // Create a Pdf file.
        $doc = new pdf();
        $doc->SetTitle('Certifygen certificate');
        $doc->SetAuthor('UNIMOODLE ');
        $doc->SetCreator('mod_certifygen');
        $doc->SetKeywords('Moodle, PDF, Certifygen, Unimoodle');
        $doc->SetSubject('This has been generated by mod_certifygen');
        $doc->SetMargins(15, 30);
        $doc->AddPage();
        $doc->writeHTML($content);

        // Get pdf content.
        $pdfcontent = $doc->Output(self::FILE_NAME_STARTSWITH . $file->get_file()->get_filename(), 'S');

        // Save pdf on moodledata.
        $fs = get_file_storage();
        $filerecord = self::get_filerecord_array(
            $file->get_course()->id,
            $file->get_validationid(),
            $file->get_file()->get_filename());

        $fs->create_file_from_string($filerecord, $pdfcontent);
    }

    /**
     * @param int $courseid
     * @param int $validationid
     * @param string $filename
     * @return array
     */
    private function get_filerecord_array(int $courseid, int $validationid, string $filename) : array {
        return [
            'contextid' => context_course::instance($courseid)->id,
            'component' => self::FILE_COMPONENT,
            'filearea' => self::FILE_AREA,
            'itemid' => $validationid,
            'filepath' => self::FILE_PATH,
            'filename' => self::FILE_NAME_STARTSWITH . $filename
        ];
    }

    /**
     * @param int $courseid
     * @param int $validationid
     * @param string $code
     * @return int
     */
    public function getState(int $courseid, int $validationid, string $code): int
    {
        if (is_null($this->getFile($courseid, $validationid, $code))) {
            return certifygen_validations::STATUS_FINISHED_ERROR;
        }
        return certifygen_validations::STATUS_FINISHED_OK;
    }

    /**
     * @param int $courseid
     * @param int $validationid
     * @param string $code
     * @return stored_file
     */
    public function getFile(int $courseid, int $validationid, string $code)
    {
        $code = self::FILE_NAME_STARTSWITH . $code;
        $fs = get_file_storage();
        $contextid = context_course::instance($courseid)->id;
        return $fs->get_file($contextid, self::FILE_COMPONENT,
            self::FILE_AREA, $validationid, self::FILE_PATH, $code);
    }

    /**
     * @return bool
     */
    public function canRevoke(): bool
    {
        return false;
    }

    /**
     * @param int $courseid
     * @param int $validationid
     * @param string $code
     * @return string
     */
    public function getFileUrl(int $courseid, int $validationid, string $code): string
    {
        $newfile = $this->getFile($courseid, $validationid, $code);
        if (!$newfile) {
            return '';
        }
        $url = moodle_url::make_pluginfile_url(
            $newfile->get_contextid(),
            $newfile->get_component(),
            $newfile->get_filearea(),
            $newfile->get_itemid(),
            $newfile->get_filepath(),
            $newfile->get_filename(),
            false                     // Do not force download of the file.
        );
        return $url->out();
    }
}