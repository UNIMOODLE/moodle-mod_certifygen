{"version":3,"file":"certificatemanager.min.js","sources":["../src/certificatemanager.js"],"sourcesContent":["/**\n * @module    mod_certifygen\n * @copyright  2024 Proyecto UNIMOODLE\n * @author     UNIMOODLE Group (Coordinator) <direccion.area.estrategia.digital@uva.es>\n * @author     3IPUNT <contacte@tresipunt.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\"use strict\";\n\nimport jQuery from 'jquery';\nimport {get_strings as getStrings} from 'core/str';\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\n\nlet REGION = {\n    ROOT: '[data-region=\"certificate-validator\"]',\n};\nlet TEMPLATES = {\n    LOADING: 'core/overlay_loading',\n    TABLE: 'mod_certifygen/my_certificates_validator',\n};\nlet ACTION = {\n    EMIT_CERTIFICATE: '[data-action=\"emit-certificate\"]',\n};\nlet SERVICES = {\n    EMIT_CERTIFICATE: 'mod_certifygen_emitcertificate',\n    GET_TABLE_DATA: 'mod_certifygen_getcontextcertificatedata',\n};\nconst CertificateManagement = () => {\n    jQuery(ACTION.EMIT_CERTIFICATE).on('click', EmitCertificate);\n};\nconst EmitCertificate = async (event) => {\n    let id = event.currentTarget.getAttribute('data-id');\n    let modelid = event.currentTarget.getAttribute('data-modelid');\n    let lang = event.currentTarget.getAttribute('data-lang');\n    let langstring = event.currentTarget.getAttribute('data-langstring');\n    let userid = event.currentTarget.getAttribute('data-userid');\n    let courseid = event.currentTarget.getAttribute('data-courseid');\n\n    // Modal estas seguro que quieres enviar el certiifcado?.\n    const stringkeys = [\n        {key: 'emitcertificate_title', component: 'mod_certifygen'},\n        {key: 'emitcertificate_body', component: 'mod_certifygen', param: langstring},\n        {key: 'confirm', component: 'mod_certifygen'},\n        {key: 'emitcertificate_error', component: 'mod_certifygen'}\n    ];\n    let langStrings = await getStrings(stringkeys);\n\n    let modal = await ModalFactory.create({\n        title: langStrings[0],\n        body: langStrings[1],\n        type: ModalFactory.types.SAVE_CANCEL\n    });\n    modal.setSaveButtonText(langStrings[2]);\n    modal.getRoot().on(ModalEvents.save, () => {\n        let request = {\n            methodname: SERVICES.EMIT_CERTIFICATE,\n            args: {\n                id,\n                modelid,\n                lang,\n                userid,\n                courseid,\n            }\n        };\n        modal.destroy();\n        Ajax.call([request])[0].done(function(response) {\n            if (response.result === true) {\n                reloadTable(modelid, courseid);\n            } else {\n                Notification.alert('Error', response.message, langStrings[2]);\n            }\n        }).fail(Notification.exception);\n    });\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        modal.destroy();\n    });\n    modal.show();\n};\nconst reloadTable = (modelid, courseid) => {\n    modelid = parseInt(modelid);\n    courseid = parseInt(courseid);\n    Templates.render(TEMPLATES.LOADING, {visible: true}).done(function(html) {\n        let identifier = jQuery(REGION.ROOT);\n        identifier.append(html);\n        let request = {\n            methodname: SERVICES.GET_TABLE_DATA,\n            args: {modelid, courseid}\n        };\n        Ajax.call([request])[0].done(function(data) {\n            Templates.render(TEMPLATES.TABLE, data).then((html, js) => {\n                identifier.html(html);\n                Templates.runTemplateJS(js);\n            }).fail(Notification.exception);\n        }).fail((error) => {\n            Notification.alert(error);\n        });\n    });\n};\nexport const init = () => {\n    CertificateManagement();\n};"],"names":["REGION","TEMPLATES","ACTION","SERVICES","EmitCertificate","async","id","event","currentTarget","getAttribute","modelid","lang","langstring","userid","courseid","stringkeys","key","component","param","langStrings","modal","ModalFactory","create","title","body","type","types","SAVE_CANCEL","setSaveButtonText","getRoot","on","ModalEvents","save","request","methodname","args","destroy","call","done","response","result","reloadTable","alert","message","fail","Notification","exception","hidden","show","parseInt","render","visible","html","identifier","append","data","then","js","runTemplateJS","error"],"mappings":"6rBAiBIA,YACM,wCAENC,kBACS,uBADTA,gBAEO,2CAEPC,wBACkB,mCAElBC,0BACkB,iCADlBA,wBAEgB,iDAKdC,gBAAkBC,MAAAA,YAChBC,GAAKC,MAAMC,cAAcC,aAAa,WACtCC,QAAUH,MAAMC,cAAcC,aAAa,gBAC3CE,KAAOJ,MAAMC,cAAcC,aAAa,aACxCG,WAAaL,MAAMC,cAAcC,aAAa,mBAC9CI,OAASN,MAAMC,cAAcC,aAAa,eAC1CK,SAAWP,MAAMC,cAAcC,aAAa,uBAG1CM,WAAa,CACf,CAACC,IAAK,wBAAyBC,UAAW,kBAC1C,CAACD,IAAK,uBAAwBC,UAAW,iBAAkBC,MAAON,YAClE,CAACI,IAAK,UAAWC,UAAW,kBAC5B,CAACD,IAAK,wBAAyBC,UAAW,uBAE1CE,kBAAoB,oBAAWJ,YAE/BK,YAAcC,uBAAaC,OAAO,CAClCC,MAAOJ,YAAY,GACnBK,KAAML,YAAY,GAClBM,KAAMJ,uBAAaK,MAAMC,cAE7BP,MAAMQ,kBAAkBT,YAAY,IACpCC,MAAMS,UAAUC,GAAGC,sBAAYC,MAAM,SAC7BC,QAAU,CACVC,WAAY/B,0BACZgC,KAAM,CACF7B,GAAAA,GACAI,QAAAA,QACAC,KAAAA,KACAE,OAAAA,OACAC,SAAAA,WAGRM,MAAMgB,wBACDC,KAAK,CAACJ,UAAU,GAAGK,MAAK,SAASC,WACV,IAApBA,SAASC,OACTC,YAAY/B,QAASI,gCAER4B,MAAM,QAASH,SAASI,QAASxB,YAAY,OAE/DyB,KAAKC,sBAAaC,cAEzB1B,MAAMS,UAAUC,GAAGC,sBAAYgB,QAAQ,KACnC3B,MAAMgB,aAEVhB,MAAM4B,QAEJP,YAAc,CAAC/B,QAASI,YAC1BJ,QAAUuC,SAASvC,SACnBI,SAAWmC,SAASnC,6BACVoC,OAAOjD,kBAAmB,CAACkD,SAAS,IAAOb,MAAK,SAASc,UAC3DC,YAAa,mBAAOrD,aACxBqD,WAAWC,OAAOF,UACdnB,QAAU,CACVC,WAAY/B,wBACZgC,KAAM,CAACzB,QAAAA,QAASI,SAAAA,yBAEfuB,KAAK,CAACJ,UAAU,GAAGK,MAAK,SAASiB,yBACxBL,OAAOjD,gBAAiBsD,MAAMC,MAAK,CAACJ,KAAMK,MAChDJ,WAAWD,KAAKA,yBACNM,cAAcD,OACzBb,KAAKC,sBAAaC,cACtBF,MAAMe,8BACQjB,MAAMiB,4BAIX,yBAtETzD,yBAAyB4B,GAAG,QAAS1B"}