{"version":3,"file":"modelmanagement.min.js","sources":["../src/modelmanagement.js"],"sourcesContent":["/**\n * @module    mod_certifygen\n * @copyright  2024 Proyecto UNIMOODLE\n * @author     UNIMOODLE Group (Coordinator) <direccion.area.estrategia.digital@uva.es>\n * @author     3IPUNT <contacte@tresipunt.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\"use strict\";\n\nimport jQuery from 'jquery';\nimport {get_strings as getStrings, get_string as getString } from 'core/str';\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\n// import mEvent from 'core/event';\nimport ModalForm from 'core_form/modalform';\n\nlet SERVICES = {\n    DELETE_MODEL : 'mod_certifygen_deletemodel',\n    GET_LIST_TABLE : 'mod_certifygen_getmodellisttable',\n};\nlet ACTION = {\n    DELETE_MODEL: '[data-action=\"delete-model\"]',\n    CREATE_MODEL: '[data-action=\"create-model\"]',\n    EDIT_MODEL: '[data-action=\"edit-model\"]',\n};\nlet REGION = {\n    ROOT: '[data-region=\"model-list-view\"]',\n    LIST_TABLE: '[data-region=\"model-list-table\"]',\n};\nlet TEMPLATES = {\n    LOADING: 'core/overlay_loading',\n    MODELLISTTABLE: 'mod_certifygen/model_list_table',\n};\nconst ModelManagement = () => {\n    jQuery(ACTION.DELETE_MODEL).on('click', DeleteModel);\n    jQuery(ACTION.CREATE_MODEL).on('click', CreateModel);\n    jQuery(ACTION.EDIT_MODEL).on('click', CreateModel);\n};\nconst CreateModel = (e) => {\n    e.preventDefault();\n    const element = e.target;\n    let id = 0;\n    if (event.currentTarget.getAttribute('data-action') == 'edit-model') {\n        id = event.currentTarget.getAttribute('data-id');\n    }\n    const modalForm = new ModalForm({\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n        formClass: \"mod_certifygen\\\\forms\\\\modelform\",\n        // Add as many arguments as you need, they will be passed to the form:\n        args: {id},\n        // Pass any configuration settings to the modal dialogue, for example, the title:\n        modalConfig: {title: getString('create_model', 'mod_certifygen')},\n        // DOM element that should get the focus after the modal dialogue is closed:\n        returnFocus: element,\n    });\n    // Listen to events if you want to execute something on form submit. Event detail will contain everything the process()\n    // function returned:\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n\n        // Recargar la tabla.\n        reloadModelListTable();\n    });\n    // Show the form.\n    modalForm.show();\n};\nconst reloadModelListTable = () => {\n    Templates.render(TEMPLATES.LOADING, {visible: true}).done(function(html) {\n        let identifier = jQuery(REGION.LIST_TABLE);\n        identifier.append(html);\n        let request = {\n            methodname: SERVICES.GET_LIST_TABLE,\n            args: {}\n        };\n        Ajax.call([request])[0].done(function(data) {\n            Templates.render(TEMPLATES.MODELLISTTABLE, data).then((html, js) => {\n                identifier.html(html);\n                Templates.runTemplateJS(js);\n            }).fail(Notification.exception);\n        }).fail(Notification.exception);\n    });\n};\nconst DeleteModel = (event) => {\n    let name = event.currentTarget.getAttribute('data-name');\n    let modelId = event.currentTarget.getAttribute('data-id');\n    // Estas seguro de borrar?\n    // Borrar.\n    const stringkeys = [\n        {key: 'deletemodeltitle', component: 'mod_certifygen'},\n        {key: 'deletemodelbody', component: 'mod_certifygen', param: name},\n        {key: 'confirm', component: 'mod_certifygen'},\n        {key: 'errortitle', component: 'mod_certifygen'},\n    ];\n    getStrings(stringkeys).then((langStrings) => {\n        return ModalFactory.create({\n            title: langStrings[0],\n            body: langStrings[1],\n            type: ModalFactory.types.SAVE_CANCEL\n        }).then(modal => {\n            modal.getRoot().on(ModalEvents.hidden, () => {\n                modal.destroy();\n            });\n            modal.getRoot().on(ModalEvents.save, () => {\n                let request = {\n                    methodname: SERVICES.DELETE_MODEL,\n                    args: {\n                        id: modelId,\n                    }\n                };\n                Ajax.call([request])[0].done(function(response) {\n                    if (response.result == 1) {\n                        // Remove tr.\n                        jQuery(event.currentTarget).parent().parent().remove();\n                    } else {\n                        // Mostrar mensaje error.\n                        return ModalFactory.create({\n                            title: langStrings[0],\n                            body: response.message,\n                            type: ModalFactory.types.CANCEL\n                        }).then(modal => {\n                            modal.getRoot().on(ModalEvents.hidden, () => {\n                                modal.destroy();\n                            });\n                        });\n                    }\n                }).fail(Notification.exception);\n            });\n            return modal;\n        });\n    }).done(function(modal) {\n        modal.show();\n    }).fail(Notification.exception);\n};\nexport const init = () => {\n    ModelManagement();\n};"],"names":["SERVICES","ACTION","REGION","TEMPLATES","CreateModel","e","preventDefault","element","target","id","event","currentTarget","getAttribute","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","addEventListener","events","FORM_SUBMITTED","reloadModelListTable","show","render","visible","done","html","identifier","append","request","methodname","call","data","then","js","runTemplateJS","fail","Notification","exception","DeleteModel","name","modelId","stringkeys","key","component","param","langStrings","ModalFactory","create","body","type","types","SAVE_CANCEL","modal","getRoot","on","ModalEvents","hidden","destroy","save","response","result","message","CANCEL","parent","remove"],"mappings":"ywBAmBIA,sBACe,6BADfA,wBAEiB,mCAEjBC,oBACc,+BADdA,oBAEc,+BAFdA,kBAGY,6BAEZC,kBAEY,mCAEZC,kBACS,uBADTA,yBAEgB,wCAOdC,YAAeC,IACjBA,EAAEC,uBACIC,QAAUF,EAAEG,WACdC,GAAK,EAC8C,cAAnDC,MAAMC,cAAcC,aAAa,iBACjCH,GAAKC,MAAMC,cAAcC,aAAa,kBAEpCC,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,mCAEXC,KAAM,CAACP,GAAAA,IAEPQ,YAAa,CAACC,OAAO,mBAAU,eAAgB,mBAE/CC,YAAaZ,UAIjBM,UAAUO,iBAAiBP,UAAUQ,OAAOC,gBAAgB,KAGxDC,0BAGJV,UAAUW,QAERD,qBAAuB,wBACfE,OAAOtB,kBAAmB,CAACuB,SAAS,IAAOC,MAAK,SAASC,UAC3DC,YAAa,mBAAO3B,mBACxB2B,WAAWC,OAAOF,UACdG,QAAU,CACVC,WAAYhC,wBACZgB,KAAM,kBAELiB,KAAK,CAACF,UAAU,GAAGJ,MAAK,SAASO,yBACxBT,OAAOtB,yBAA0B+B,MAAMC,MAAK,CAACP,KAAMQ,MACzDP,WAAWD,KAAKA,yBACNS,cAAcD,OACzBE,KAAKC,sBAAaC,cACtBF,KAAKC,sBAAaC,eAGvBC,YAAe/B,YACbgC,KAAOhC,MAAMC,cAAcC,aAAa,aACxC+B,QAAUjC,MAAMC,cAAcC,aAAa,iBAGzCgC,WAAa,CACf,CAACC,IAAK,mBAAoBC,UAAW,kBACrC,CAACD,IAAK,kBAAmBC,UAAW,iBAAkBC,MAAOL,MAC7D,CAACG,IAAK,UAAWC,UAAW,kBAC5B,CAACD,IAAK,aAAcC,UAAW,wCAExBF,YAAYT,MAAMa,aAClBC,uBAAaC,OAAO,CACvBhC,MAAO8B,YAAY,GACnBG,KAAMH,YAAY,GAClBI,KAAMH,uBAAaI,MAAMC,cAC1BnB,MAAKoB,QACJA,MAAMC,UAAUC,GAAGC,sBAAYC,QAAQ,KACnCJ,MAAMK,aAEVL,MAAMC,UAAUC,GAAGC,sBAAYG,MAAM,SAC7B9B,QAAU,CACVC,WAAYhC,sBACZgB,KAAM,CACFP,GAAIkC,wBAGPV,KAAK,CAACF,UAAU,GAAGJ,MAAK,SAASmC,aACX,GAAnBA,SAASC,cAKFd,uBAAaC,OAAO,CACvBhC,MAAO8B,YAAY,GACnBG,KAAMW,SAASE,QACfZ,KAAMH,uBAAaI,MAAMY,SAC1B9B,MAAKoB,QACJA,MAAMC,UAAUC,GAAGC,sBAAYC,QAAQ,KACnCJ,MAAMK,oCATPlD,MAAMC,eAAeuD,SAASA,SAASC,YAanD7B,KAAKC,sBAAaC,cAElBe,WAEZ5B,MAAK,SAAS4B,OACbA,MAAM/B,UACPc,KAAKC,sBAAaC,0BAEL,yBAlGTvC,qBAAqBwD,GAAG,QAAShB,iCACjCxC,qBAAqBwD,GAAG,QAASrD,iCACjCH,mBAAmBwD,GAAG,QAASrD"}